#!/usr/bin/env bash

set -euo pipefail

if [ -e .envrc ] || [ -e .envrc.private ] || [ -e nix ] || [ -e shell.nix ] || [ -e bin/update-nixpkgs ]; then
    echo "Conflict. Aborting."
    exit 1
fi

cat <<EOF > shell.nix
let
  pkgs = import ./nix/nixpkgs.nix;
in
pkgs.mkShell {
  LOCALE_ARCHIVE = if pkgs.stdenv.isLinux then "\${pkgs.glibcLocales}/lib/locale/locale-archive" else "";
  buildInputs = with pkgs; [
    bash
    curl
    jq
  ];
}
EOF

cat <<EOF > .envrc
use nix

PATH_add bin

source_env_if_exists .envrc.private
EOF

cat <<EOF > .envrc.private
# Set private env vars here
# export MY_LOCAL_SECRET="super secret stuff"
EOF

echo .envrc.private >> .gitignore

mkdir -p bin
cat << 'EOF' > bin/update-nixpkgs
#!/usr/bin/env bash

set -euo pipefail
DIR="$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd)"

branch=$(jq -r '.branch' $DIR/../nix/src.json)
repo=$(jq -r '.repo' $DIR/../nix/src.json)
owner=$(jq -r '.owner' $DIR/../nix/src.json)

commit=$(curl --silent \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              https://api.github.com/repos/$owner/$repo/branches/$branch \
         | jq -r .commit.sha)

archive_sha=$(nix-prefetch-url \
                https://github.com/$owner/$repo/archive/$commit.tar.gz \
                --unpack \
                2>/dev/null)

jq -n \
   --arg branch $branch \
   --arg repo $repo \
   --arg owner $owner \
   --arg commit $commit \
   --arg sha $archive_sha \
   '{$branch, $repo, $owner, $commit, $sha}' \
   > $DIR/../nix/src.json
EOF
chmod +x bin/update-nixpkgs

mkdir nix
cat << 'EOF' > nix/nixpkgs.nix
let
  spec = builtins.fromJSON (builtins.readFile ./src.json);
in
  import (builtins.fetchTarball {
    url = "https://github.com/${spec.owner}/${spec.repo}/archive/${spec.commit}.tar.gz";
    sha256 = spec.sha;
  }) {}
EOF

echo '{"branch":"nixpkgs-unstable","repo":"nixpkgs","owner":"NixOS"}' > nix/src.json
nix-shell -p jq -p curl --run bin/update-nixpkgs
