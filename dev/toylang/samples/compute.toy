(def nfib
  (fn [n]
    (cond
      (<= n 0) 1
      true (+ (nfib (- n 1)) (nfib (- n 2))))))

(def exists
  (fn [pred vec]
    (cond
      (pred (first vec)) true
      true (exists pred (rest vec)))))

(def nth-prime
  (fn [n]
    (let [primes-helper (fn [primes-so-far idx cur]
                          (cond
                            (< idx (count primes-so-far)) (get primes-so-far id)
                            (exists (fn [d] (= 1 (rem cur d))) primes-so-far) (primes-helper primes-so-far idx (+ cur 1))
                            true (primes-helper (conj primes-so-far cur) idx (+ 1 cur))))]
      (cond
        (<= n 0) -1
        (= n 1) 1
        (= n 2) 2
        true (primes-helper [1 2] (+ n 1) 3)))))
